/***********************************************************************
 ** Copyright (C) 2010 Movid Authors.  All rights reserved.
 **
 ** This file is part of the Movid Software.
 **
 ** This file may be distributed under the terms of the Q Public License
 ** as defined by Trolltech AS of Norway and appearing in the file
 ** LICENSE included in the packaging of this file.
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 **
 ** Contact info@movid.org if any conditions of this licensing are
 ** not clear to you.
 **
 **********************************************************************/


#include <math.h>
#include <assert.h>
#include "moDiffuseDistanceModule.h"
#include "../moLog.h"
#include "cv.h"

MODULE_DECLARE(DiffuseDistance, "native", "Diffuse Distance Description");

moDiffuseDistanceModule::moDiffuseDistanceModule() : moImageFilterModule(){

	MODULE_INIT();

	// The minimum value a peak must have
	this->properties["min_value"] = new moProperty(0.);
	// The maximum value a peak may have
	this->properties["max_value"] = new moProperty(255.);
	// The maximum number of peaks that you want. Takes the strongest peaks.
	// If this is set to 0, it returns all peaks.
	this->properties["max_peaks"] = new moProperty(1);
	// Avoid duplicate peaks that are close to each other.
	this->properties["merge_distance"] = new moProperty(4.);
}

moDiffuseDistanceModule::~moDiffuseDistanceModule() {
}

bool _sort_pred(const doubleToPoint &left, const doubleToPoint &right) {
	return left.first > right.first;
}

bool _in(std::vector<int> &vec, int e) {
	for (unsigned int i = 0; i < vec.size(); i++) {
		if (vec[i] == e) return true;
	}
	return false;
}

void moDiffuseDistanceModule::applyFilter(IplImage *src) {
	//copy the source image to calculate depth map
	IplImage *copy = cvCloneImage(src);

	//iterate through the image and look at a window around each pixel
	int step = src->widthStep;
	int height = src->height;
	int width = src->width;
	double min = this->property("min_value").asDouble();
	double max = this->property("max_value").asDouble();
	double cur_val;
	char *data = src->imageData;

	for (int i = 0; i < width; i++) {
		for (int j = 0; j < height; j++) {
			cur_val = ((int) data[j * step + i]);
			if ((min < cur_val) && (cur_val < max)) {
				doubleToPoint p;
				p.first = cur_val;
				p.second.x = i;
				p.second.y = j;
				this->peaks.push_back(p);
			}
		}
	}
}

